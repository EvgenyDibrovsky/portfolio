{"version":3,"file":"static/js/418.a60402c0.chunk.js","mappings":"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","sources":["components/MetaTags/MetaTags.jsx","components/Utility/AnimateElements.jsx","components/Utility/PageTitle.jsx","components/Utility/SubTitle.jsx","components/Utility/WrapperTitle.jsx","components/ContactForm/ContactForm.jsx","components/ContactDetails/ContactDetails.jsx","pages/Contacts.jsx"],"sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\n\nconst MetaTags = ({ metaTitle, metaDescription }) => {\n  const { i18n } = useTranslation();\n\n  return (\n    <Helmet>\n      <html lang={i18n.language} />\n      <title>{metaTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n    </Helmet>\n  );\n};\n\nexport default MetaTags;\n","import React, { useEffect, useRef } from 'react';\n\nconst AnimateElements = ({ children }) => {\n  const elementsRef = useRef(null);\n\n  useEffect(() => {\n    const elements = elementsRef.current.querySelectorAll('.init-animate-1, .init-animate-2, .init-animate-3, .init-animate-4, .init-animate-5');\n\n    function onEntry(entries) {\n      entries.forEach(entry => {\n        const target = entry.target;\n        if (entry.isIntersecting) {\n          let animateClass;\n          let duration = target.getAttribute('data-time') || '1s';\n          let delay = target.getAttribute('data-delay') || '0s';\n          let delayInMilliseconds = parseFloat(delay) * 1000;\n\n          if (target.classList.contains('init-animate-1')) {\n            animateClass = 'animate-animate-1';\n          } else if (target.classList.contains('init-animate-2')) {\n            animateClass = 'animate-animate-2';\n          } else if (target.classList.contains('init-animate-3')) {\n            animateClass = 'animate-animate-3';\n          } else if (target.classList.contains('init-animate-4')) {\n            animateClass = 'animate-animate-4';\n          } else if (target.classList.contains('init-animate-5')) {\n            animateClass = 'animate-animate-5';\n          }\n\n          if (animateClass) {\n            target.classList.remove('not-animated');\n            target.style.animationDuration = duration;\n\n            setTimeout(() => {\n              target.classList.remove('opacity-0');\n              target.classList.add(animateClass);\n            }, delayInMilliseconds);\n          }\n        }\n      });\n    }\n\n    const observer = new IntersectionObserver(onEntry, {\n      threshold: 0.1,\n      rootMargin: '0px 0px -5% 0px',\n    });\n\n    elements.forEach(element => {\n      element.classList.add('not-animated');\n      observer.observe(element);\n    });\n\n    return () => {\n      elements.forEach(element => observer.unobserve(element));\n    };\n  }, []);\n\n  return <div ref={elementsRef}>{children}</div>;\n};\n\nexport default AnimateElements;\n","import React from 'react';\n\nexport default function PageTitle({ icon, title }) {\n  const IconComponent = icon\n    ? React.cloneElement(icon, {\n        className: 'text-iconColor dark:text-iconColorDark w-6 h-6',\n      })\n    : null;\n\n  return (\n    <div className=\"sm:w-full flex items-center gap-4\">\n      {IconComponent && <div className=\"animate-iconTitle\">{IconComponent}</div>}\n      <h1 className=\"text-[1.5rem] font-semibold text-black dark:text-white\">{title}</h1>\n    </div>\n  );\n}\n","export default function SubTitle({ subTitle }) {\n  return <h2 className=\"w-full text-[1.25rem] text-black dark:text-white text-center sm:text-right \">{subTitle}</h2>;\n}\n","import AnimateElements from 'components/Utility/AnimateElements';\n\nexport default function WrapperTitle({ children }) {\n  return (\n    <AnimateElements>\n      <div className=\"relative flex flex-col lg:flex-row items-center lg:justify-between gap-4 mb-8 after:content-[''] after:absolute after:-bottom-4 after:left-1/2 after:-translate-x-1/2 after:w-full after:h-[2px] after:bg-gray-200 dark:after:bg-orange-400 opacity-0 init-animate-3\">\n        {children}\n      </div>\n    </AnimateElements>\n  );\n}\n","import React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport AnimateElements from 'components/Utility/AnimateElements';\nimport axios from 'axios';\nimport { useGoogleReCaptcha } from 'react-google-recaptcha-v3';\n\nexport default function ContactForm() {\n  const { t } = useTranslation();\n  const { executeRecaptcha } = useGoogleReCaptcha();\n  const [statusMessage, setStatusMessage] = useState(null);\n  const [isSuccess, setIsSuccess] = useState(null);\n\n  const validationSchema = Yup.object({\n    name: Yup.string().required(t('contact-form.enter-name')),\n    email: Yup.string().email().required(t('contact-form.enter-email')),\n    subject: Yup.string().required(t('contact-form.enter-message-subject')),\n    message: Yup.string().required(t('contact-form.enter-message')),\n    confirmation_of_conditions: Yup.boolean().required(t('contact-form.confirmation-required')),\n  });\n\n  const handleSubmit = async (values, { setSubmitting, resetForm }) => {\n    if (!values.confirmation_of_conditions) {\n      setStatusMessage(t('contact-form.confirmation-required'));\n      setIsSuccess(false);\n      setSubmitting(false);\n      return;\n    }\n\n    if (executeRecaptcha) {\n      const token = await executeRecaptcha('contact_form');\n      values.recaptchaToken = token;\n    }\n\n    axios\n      .post('https://edweb.site/contact-form', values) // Замените на актуальный URL сервера\n      .then(response => {\n        setStatusMessage(t('contact-form.sent-successfully'));\n        setIsSuccess(true);\n        resetForm();\n      })\n      .catch(error => {\n        setStatusMessage(t('contact-form.sent-no-successfully'));\n        setIsSuccess(false);\n      })\n      .finally(() => {\n        setSubmitting(false);\n      });\n  };\n\n  return (\n    <>\n      <AnimateElements>\n        <div className=\"w-full xl:w-10/12 mx-auto opacity-0 init-animate-1\">\n          <Formik\n            initialValues={{\n              name: '',\n              email: '',\n              subject: '',\n              message: '',\n              confirmation_of_conditions: '',\n            }}\n            validationSchema={validationSchema}\n            onSubmit={handleSubmit}\n          >\n            {({ errors, touched }) => (\n              <Form className=\"w-full my-10 \">\n                <div className=\"w-full flex-col lg:flex-row min-h-[18rem] flex gap-4 mb-10\">\n                  <div className=\"w-full lg:w-6/12 flex gap-5 flex-col justify-between\">\n                    <label className=\"flex flex-col gap-2 text-black dark:text-white\">\n                      {t('contact-form.name')}\n                      <Field\n                        name=\"name\"\n                        type=\"text\"\n                        placeholder={t('contact-form.enter-name')}\n                        className={`appearance-none  w-full h-12 bg-white dark:bg-black border border-colorBorder dark:border-colorBorderDark px-2 rounded-md ${\n                          errors.name && touched.name ? 'error' : ''\n                        }`}\n                      />\n                    </label>\n\n                    <label className=\"flex flex-col gap-2 text-black dark:text-white\">\n                      {t('contact-form.email')}\n                      <Field\n                        name=\"email\"\n                        type=\"email\"\n                        placeholder={t('contact-form.enter-email')}\n                        className={`w-full h-12 bg-white dark:bg-black border border-colorBorder dark:border-colorBorderDark px-2 rounded-md ${errors.email && touched.email ? 'error' : ''}`}\n                      />\n                    </label>\n\n                    <label className=\"flex flex-col gap-2 text-black dark:text-white\">\n                      {t('contact-form.message-subject')}\n                      <Field\n                        name=\"subject\"\n                        type=\"text\"\n                        placeholder={t('contact-form.enter-message-subject')}\n                        className={`w-full h-12 bg-white dark:bg-black border border-colorBorder dark:border-colorBorderDark px-2 rounded-md ${errors.subject && touched.subject ? 'error' : ''}`}\n                      />\n                    </label>\n                  </div>\n\n                  <div className=\"w-full lg:w-6/12\">\n                    <label className=\"flex flex-col gap-2 h-[20rem] lg:h-full text-black dark:text-white\">\n                      {t('contact-form.message')}\n                      <Field\n                        as=\"textarea\"\n                        name=\"message\"\n                        placeholder={t('contact-form.enter-message')}\n                        className={`w-full h-full bg-white dark:bg-black border border-colorBorder dark:border-colorBorderDark px-2 rounded-md resize-none ${\n                          errors.message && touched.message ? 'error' : ''\n                        }`}\n                      />\n                    </label>\n                  </div>\n                </div>\n\n                <div className=\"block mb-4\">\n                  <label className=\"lg:inline-flex lg:items-center lg:gap-1 text-black dark:text-white\">\n                    <Field\n                      type=\"checkbox\"\n                      name=\"confirmation_of_conditions\"\n                      className={`form-checkbox mr-2 ${errors.confirmation_of_conditions && touched.confirmation_of_conditions ? 'error' : ''}`}\n                    />\n                    {t('contact-form.accept-form')}\n                    <a\n                      href=\"/regulations-edweb\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"inline-block font-semibold underline duration-200 hover:text-sky-600 ml-1 lg:ml-0\"\n                      aria-label={t('regulations-edweb.title')}\n                    >\n                      {t('regulations-edweb.title')}\n                    </a>\n                  </label>\n                </div>\n                <div className=\"mb-10\">\n                  <p className=\"text-xs text-black dark:text-white\">\n                    {t('recaptcha.text-1')}\n                    <a\n                      href=\"https://policies.google.com/privacy\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"font-bold underline duration-200  hover:text-sky-600\"\n                      aria-label={t('recaptcha.privacy-policy')}\n                    >\n                      {t('recaptcha.privacy-policy')}\n                    </a>\n                    {t('recaptcha.text-2')}\n                    <a\n                      href=\"https://policies.google.com/terms\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"font-bold underline duration-200  hover:text-sky-600\"\n                      aria-label={t('recaptcha.terms-of-service')}\n                    >\n                      {t('recaptcha.terms-of-service')}\n                    </a>\n                    {t('recaptcha.text-3')}\n                  </p>\n                </div>\n                {statusMessage && (\n                  <div className={`flex justify-center items-center text-white text-center status-message h-16 sm:h-12 mb-10 rounded-sm ${isSuccess ? 'bg-green-600' : 'bg-red-600'}`}>\n                    {statusMessage}\n                  </div>\n                )}\n                <button type=\"submit\" className=\"btn-contact-form inline-block mr-auto\" title={t('contact-form.send')}>\n                  {t('contact-form.send')}\n                </button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </AnimateElements>\n    </>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { BsPhone, BsEnvelope, BsPinMap } from 'react-icons/bs';\nimport AnimateElements from 'components/Utility/AnimateElements';\n\nexport default function ContactDetails() {\n  const { t } = useTranslation();\n  return (\n    <AnimateElements>\n      <ul className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 justify-center\">\n        <li className=\"flex justify-center items-center gap-4 lg:flex-col xl:flex-row shadow-sm shadow-black dark:shadow-white h-20 lg:h-40 opacity-0 init-animate-1\">\n          <BsPhone className=\"w-8 h-8 text-orange-400\" />\n          <a className=\"text-[1rem] lg:text-[1.25rem] font-semibold text-textColor dark:text-white transition-all duration-200 hover:underline\" href={`tel:${t('contact-dedails.phone-number')}`}>\n            {t('contact-dedails.phone-number')}\n          </a>\n        </li>\n        <li className=\"flex justify-center items-center gap-4 lg:flex-col xl:flex-row shadow-sm shadow-black dark:shadow-white h-20 lg:h-40 opacity-0 init-animate-1\">\n          <BsEnvelope className=\"w-8 h-8 text-orange-400\" />\n          <a className=\"text-[1rem] lg:text-[1.25rem] font-semibold text-textColor dark:text-white duration-200 hover:underline\" href={`mailto:${t('contact-dedails.email-address')}`}>\n            {t('contact-dedails.email-address')}\n          </a>\n        </li>\n        <li className=\"flex justify-center items-center gap-4 lg:flex-col xl:flex-row  shadow-sm shadow-black dark:shadow-white h-20 lg:h-40 opacity-0 init-animate-1\">\n          <BsPinMap className=\"w-8 h-8 text-orange-400\" />\n          <p className=\"text-[1rem] lg:text-[1.25rem] font-semibold text-textColor dark:text-white\">{t('contact-dedails.localization')}</p>\n        </li>\n      </ul>\n    </AnimateElements>\n  );\n}\n","import PageTitle from 'components/Utility/PageTitle';\nimport SubTitle from 'components/Utility/SubTitle';\nimport { useTranslation } from 'react-i18next';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { BsPhone } from 'react-icons/bs';\nimport MetaTags from 'components/MetaTags/MetaTags';\nimport ContactDetails from 'components/ContactDetails/ContactDetails';\nimport WrapperTitle from 'components/Utility/WrapperTitle';\nimport { GoogleReCaptchaProvider } from 'react-google-recaptcha-v3';\nconst RECAPTCHA_KEY = process.env.REACT_APP_RECAPTCHA_KEY;\n\nexport default function ContactPage() {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <MetaTags metaTitle={t('contacts-page.meta-title')} metaDescription={t('contacts-page.meta-description')} />\n      <WrapperTitle>\n        <PageTitle icon={<BsPhone />} title={t('contacts-page.title')} />\n        <SubTitle subTitle={t('contacts-page.sub-title')} />\n      </WrapperTitle>\n      <ContactDetails />\n      <GoogleReCaptchaProvider reCaptchaKey={RECAPTCHA_KEY}>\n        <ContactForm />\n      </GoogleReCaptchaProvider>\n    </>\n  );\n}\n"],"names":["metaTitle","metaDescription","i18n","useTranslation","lang","language","name","content","children","elementsRef","useRef","useEffect","elements","current","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","target","isIntersecting","animateClass","duration","getAttribute","delay","delayInMilliseconds","parseFloat","classList","contains","remove","style","animationDuration","setTimeout","add","threshold","rootMargin","element","observe","unobserve","ref","PageTitle","icon","title","IconComponent","React","className","SubTitle","subTitle","WrapperTitle","ContactForm","t","executeRecaptcha","useGoogleReCaptcha","useState","statusMessage","setStatusMessage","isSuccess","setIsSuccess","validationSchema","Yup","required","email","subject","message","confirmation_of_conditions","handleSubmit","values","setSubmitting","resetForm","token","recaptchaToken","axios","then","response","catch","error","finally","AnimateElements","initialValues","onSubmit","errors","touched","type","placeholder","as","href","rel","ContactDetails","RECAPTCHA_KEY","process","REACT_APP_RECAPTCHA_KEY","ContactPage","MetaTags","reCaptchaKey"],"sourceRoot":""}